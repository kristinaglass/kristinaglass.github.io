[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kristina Glass",
    "section": "",
    "text": "Hi this is kristina\nthis is my page :) enjoy"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Kristina Glass",
    "section": "Education",
    "text": "Education"
  },
  {
    "objectID": "index.html#work",
    "href": "index.html#work",
    "title": "Kristina Glass",
    "section": "Work",
    "text": "Work"
  },
  {
    "objectID": "index.html#hobbies",
    "href": "index.html#hobbies",
    "title": "Kristina Glass",
    "section": "Hobbies",
    "text": "Hobbies"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "blog",
    "section": "",
    "text": "ipynb rendered as html\n\n\nThis post was rendered from an .ipynb file through quarto\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThomas Fire Analysis in Santa Barbara, CA\n\n\nThe purpose of this analysis is to understand the impacts of the Thomas Fire on AQI and to visualize the burn area.\n\n\n\nKristina Glass\n\n\n\n\n\n\n\n\n\n\n\n\nNDVI Along Santa Clara River\n\n\n\nQuarto\n\n\nR\n\n\nMEDS\n\n\n\nThis project explores plant phenology along the Santa Clara River, investingating plant communities over time.\n\n\n\nKristina Glass\n\n\nDec 15, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMy first blog post\n\n\n\nQuarto\n\n\nR\n\n\nMEDS\n\n\n\nthis is my short description\n\n\n\nKristina Glass\n\n\nNov 6, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/2023-11-06-my-first-post/index.html",
    "href": "blog/2023-11-06-my-first-post/index.html",
    "title": "My first blog post",
    "section": "",
    "text": "Hi, this is my first post I hope you like it :)\n\n\n\nCitationBibTeX citation:@online{glass2023,\n  author = {Glass, Kristina},\n  title = {My First Blog Post},\n  date = {2023-11-06},\n  url = {https://kristinaglass.github.io.blog/2020-ll-06-my-first-post},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nGlass, Kristina. 2023. “My First Blog Post.” November 6,\n2023. https://kristinaglass.github.io.blog/2020-ll-06-my-first-post."
  },
  {
    "objectID": "blog/python_notebook_render/STAC-search.html",
    "href": "blog/python_notebook_render/STAC-search.html",
    "title": "ipynb rendered as html",
    "section": "",
    "text": "import numpy as np\nimport geopandas as gpd\nimport rioxarray as rioxr\nimport matplotlib.pyplot as plt\n\nfrom shapely.geometry import Polygon\n\n#used to access STAC catalogs\nfrom pystac_client import Client\n#used to sign iyems from the MPC STAC catelog\nimport planetary_computer\n\n#other libraries fro nice outputs\nfrom IPython.display import Image"
  },
  {
    "objectID": "blog/python_notebook_render/STAC-search.html#exploration",
    "href": "blog/python_notebook_render/STAC-search.html#exploration",
    "title": "ipynb rendered as html",
    "section": "Exploration",
    "text": "Exploration\nLets check out some of the catalog’s metadata\n\n# metadata from Catalog\nprint('Title:', catalog.title)\nprint('Description', catalog.description)\n\nTitle: Microsoft Planetary Computer STAC API\nDescription Searchable spatiotemporal metadata describing Earth science datasets hosted by the Microsoft Planetary Computer\n\n\nWe can access the catalong collections using the get_collections() method\n\ncatalog.get_collections()\n\n&lt;generator object Client.get_collections at 0x7863345fc370&gt;\n\n\nNotice the output of the gt_collections() is a generator.\nThis is a special kind of lazy object in Python over which you can loop over like a list. Ulike a list, the items in the genoratos do not exist in memory until you explicetly itrate over them or convert them to a list. Lets try gtting the collections from the catalog again\n\n# get collections and print their names\ncollections = list(catalog.get_collections())\n\nprint('Number of collections:', len(collections))\nprint(\"Collections IDs:\")\nfor collection in collections:\n    print('-', collection.id)\n\nNumber of collections: 122\nCollections IDs:\n- daymet-annual-pr\n- daymet-daily-hi\n- 3dep-seamless\n- 3dep-lidar-dsm\n- fia\n- sentinel-1-rtc\n- gridmet\n- daymet-annual-na\n- daymet-monthly-na\n- daymet-annual-hi\n- daymet-monthly-hi\n- daymet-monthly-pr\n- gnatsgo-tables\n- hgb\n- cop-dem-glo-30\n- cop-dem-glo-90\n- goes-cmi\n- terraclimate\n- nasa-nex-gddp-cmip6\n- gpm-imerg-hhr\n- gnatsgo-rasters\n- 3dep-lidar-hag\n- 3dep-lidar-intensity\n- 3dep-lidar-pointsourceid\n- mtbs\n- noaa-c-cap\n- 3dep-lidar-copc\n- modis-64A1-061\n- alos-fnf-mosaic\n- 3dep-lidar-returns\n- mobi\n- landsat-c2-l2\n- era5-pds\n- chloris-biomass\n- kaza-hydroforecast\n- planet-nicfi-analytic\n- modis-17A2H-061\n- modis-11A2-061\n- daymet-daily-pr\n- 3dep-lidar-dtm-native\n- 3dep-lidar-classification\n- 3dep-lidar-dtm\n- gap\n- modis-17A2HGF-061\n- planet-nicfi-visual\n- gbif\n- modis-17A3HGF-061\n- modis-09A1-061\n- alos-dem\n- alos-palsar-mosaic\n- deltares-water-availability\n- modis-16A3GF-061\n- modis-21A2-061\n- us-census\n- jrc-gsw\n- deltares-floods\n- modis-43A4-061\n- modis-09Q1-061\n- modis-14A1-061\n- hrea\n- modis-13Q1-061\n- modis-14A2-061\n- sentinel-2-l2a\n- modis-15A2H-061\n- modis-11A1-061\n- modis-15A3H-061\n- modis-13A1-061\n- daymet-daily-na\n- nrcan-landcover\n- modis-10A2-061\n- ecmwf-forecast\n- noaa-mrms-qpe-24h-pass2\n- sentinel-1-grd\n- nasadem\n- io-lulc\n- landsat-c2-l1\n- drcog-lulc\n- chesapeake-lc-7\n- chesapeake-lc-13\n- chesapeake-lu\n- noaa-mrms-qpe-1h-pass1\n- noaa-mrms-qpe-1h-pass2\n- noaa-nclimgrid-monthly\n- goes-glm\n- usda-cdl\n- eclipse\n- esa-cci-lc\n- esa-cci-lc-netcdf\n- fws-nwi\n- usgs-lcmap-conus-v13\n- usgs-lcmap-hawaii-v10\n- noaa-climate-normals-tabular\n- noaa-climate-normals-netcdf\n- noaa-climate-normals-gridded\n- aster-l1t\n- cil-gdpcir-cc-by-sa\n- io-lulc-9-class\n- io-biodiversity\n- naip\n- noaa-cdr-sea-surface-temperature-whoi\n- noaa-cdr-ocean-heat-content\n- cil-gdpcir-cc0\n- cil-gdpcir-cc-by\n- noaa-cdr-sea-surface-temperature-whoi-netcdf\n- noaa-cdr-sea-surface-temperature-optimum-interpolation\n- modis-10A1-061\n- sentinel-5p-l2-netcdf\n- sentinel-3-olci-wfr-l2-netcdf\n- noaa-cdr-ocean-heat-content-netcdf\n- sentinel-3-synergy-aod-l2-netcdf\n- sentinel-3-synergy-v10-l2-netcdf\n- sentinel-3-olci-lfr-l2-netcdf\n- sentinel-3-sral-lan-l2-netcdf\n- sentinel-3-slstr-lst-l2-netcdf\n- sentinel-3-slstr-wst-l2-netcdf\n- sentinel-3-sral-wat-l2-netcdf\n- ms-buildings\n- sentinel-3-slstr-frp-l2-netcdf\n- sentinel-3-synergy-syn-l2-netcdf\n- sentinel-3-synergy-vgp-l2-netcdf\n- sentinel-3-synergy-vg1-l2-netcdf\n- esa-worldcover"
  },
  {
    "objectID": "blog/python_notebook_render/STAC-search.html#collection",
    "href": "blog/python_notebook_render/STAC-search.html#collection",
    "title": "ipynb rendered as html",
    "section": "Collection",
    "text": "Collection\nWe can select a single collection for exploration using the get_child() method for the catalog and the collection id as the parameter\n\nnaip_collection = catalog.get_child('naip')\nnaip_collection                                   \n\n\n\n\n    \n    \n    \n        \n            \n                \n                    CollectionClient: naip\n                \n            \n            \n\n\n\n\n\n\nid: naip\n\n\ntitle: NAIP: National Agriculture Imagery Program\n\n\ndescription: The [National Agriculture Imagery Program](https://www.fsa.usda.gov/programs-and-services/aerial-photography/imagery-programs/naip-imagery/) (NAIP) provides U.S.-wide, high-resolution aerial imagery, with four spectral bands (R, G, B, IR). NAIP is administered by the [Aerial Field Photography Office](https://www.fsa.usda.gov/programs-and-services/aerial-photography/) (AFPO) within the [US Department of Agriculture](https://www.usda.gov/) (USDA). Data are captured at least once every three years for each state. This dataset represents NAIP data from 2010-present, in [cloud-optimized GeoTIFF](https://www.cogeo.org/) format.\n\n\nproviders:\n\n\nUSDA Farm Service Agency (producer, licensor)\n\n\nEsri (processor)\n\n\nMicrosoft (host, processor)\n\n\n\n\ntype: Collection\n\n\nitem_assets: {'image': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized', 'roles': ['data'], 'title': 'RGBIR COG tile', 'eo:bands': [{'name': 'Red', 'common_name': 'red'}, {'name': 'Green', 'common_name': 'green'}, {'name': 'Blue', 'common_name': 'blue'}, {'name': 'NIR', 'common_name': 'nir', 'description': 'near-infrared'}]}, 'metadata': {'type': 'text/plain', 'roles': ['metadata'], 'title': 'FGDC Metdata'}, 'thumbnail': {'type': 'image/jpeg', 'roles': ['thumbnail'], 'title': 'Thumbnail'}}\n\n\nmsft:region: westeurope\n\n\nmsft:container: naip\n\n\nmsft:storage_account: naipeuwest\n\n\nmsft:short_description: NAIP provides US-wide, high-resolution aerial imagery. This dataset includes NAIP images from 2010 to the present.\n\n\n\n\nSTAC Extensions\n\n\n\nhttps://stac-extensions.github.io/item-assets/v1.0.0/schema.json\n\n\nhttps://stac-extensions.github.io/table/v1.2.0/schema.json\n\n\n\n\n\nItems\nOnly the first item shown\n\n\n\n\n\nItem: hi_m_2015561_sw_05_060_20211226_20220909\n\n\n\nid: hi_m_2015561_sw_05_060_20211226_20220909\n\n\nbbox: [-155.502923, 19.997278, -155.434587, 20.065225]\n\n\ngsd: 0.6\n\n\ndatetime: 2021-12-26T16:00:00Z\n\n\nnaip:year: 2021\n\n\nproj:bbox: [238224.0, 2213136.0, 245268.0, 2220558.0]\n\n\nproj:epsg: 26905\n\n\nproviders: [{'url': 'https://www.fsa.usda.gov/programs-and-services/aerial-photography/imagery-programs/naip-imagery/', 'name': 'USDA Farm Service Agency', 'roles': ['producer', 'licensor']}]\n\n\nnaip:state: hi\n\n\nproj:shape: [12370, 11740]\n\n\nproj:transform: [0.6, 0.0, 238224.0, 0.0, -0.6, 2220558.0, 0.0, 0.0, 1.0]\n\n\n\n\nSTAC Extensions\n\n\n\nhttps://stac-extensions.github.io/eo/v1.0.0/schema.json\n\n\nhttps://stac-extensions.github.io/projection/v1.0.0/schema.json\n\n\n\n\n\nAssets\n\n\n\n\n\nAsset: RGBIR COG tile\n\n\n\nhref: https://naipeuwest.blob.core.windows.net/naip/v002/hi/2021/hi_060cm_2021/20155/61/m_2015561_sw_05_060_20211226_20220909.tif\n\n\ntype: image/tiff; application=geotiff; profile=cloud-optimized\n\n\ntitle: RGBIR COG tile\n\n\nroles: ['data']\n\n\nowner: hi_m_2015561_sw_05_060_20211226_20220909\n\n\neo:bands: [{'name': 'Red', 'common_name': 'red'}, {'name': 'Green', 'common_name': 'green'}, {'name': 'Blue', 'common_name': 'blue'}, {'name': 'NIR', 'common_name': 'nir', 'description': 'near-infrared'}]\n\n\n\n\n\n\n\n\n\n\nAsset: Thumbnail\n\n\n\nhref: https://naipeuwest.blob.core.windows.net/naip/v002/hi/2021/hi_060cm_2021/20155/m_2015561_sw_05_060_20211226_20220909.200.jpg\n\n\ntype: image/jpeg\n\n\ntitle: Thumbnail\n\n\nroles: ['thumbnail']\n\n\nowner: hi_m_2015561_sw_05_060_20211226_20220909\n\n\n\n\n\n\n\n\n\n\nAsset: TileJSON with default rendering\n\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=naip&item=hi_m_2015561_sw_05_060_20211226_20220909&assets=image&asset_bidx=image%7C1%2C2%2C3&format=png\n\n\ntype: application/json\n\n\ntitle: TileJSON with default rendering\n\n\nroles: ['tiles']\n\n\nowner: hi_m_2015561_sw_05_060_20211226_20220909\n\n\n\n\n\n\n\n\n\n\nAsset: Rendered preview\n\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=naip&item=hi_m_2015561_sw_05_060_20211226_20220909&assets=image&asset_bidx=image%7C1%2C2%2C3&format=png\n\n\ntype: image/png\n\n\ntitle: Rendered preview\n\n\nroles: ['overview']\n\n\nowner: hi_m_2015561_sw_05_060_20211226_20220909\n\n\nrel: preview\n\n\n\n\n\n\n\nLinks\n\n\n\n\n\nLink:\n\n\n\nrel: collection\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/naip\n\n\ntype: application/json\n\n\n\n\n\n\n\n\n\n\nLink:\n\n\n\nrel: parent\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/naip\n\n\ntype: application/json\n\n\n\n\n\n\n\n\n\n\nLink: Microsoft Planetary Computer STAC API\n\n\n\nrel: root\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/\n\n\ntype: application/json\n\n\ntitle: Microsoft Planetary Computer STAC API\n\n\n\n\n\n\n\n\n\n\nLink:\n\n\n\nrel: self\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/naip/items/hi_m_2015561_sw_05_060_20211226_20220909\n\n\ntype: application/geo+json\n\n\n\n\n\n\n\n\n\n\nLink: Map of item\n\n\n\nrel: preview\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/map?collection=naip&item=hi_m_2015561_sw_05_060_20211226_20220909\n\n\ntype: text/html\n\n\ntitle: Map of item\n\n\n\n\n\n\n\n\n\n\nLinks\n\n\n\n\n\nLink:\n\n\n\nrel: items\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/naip/items\n\n\ntype: application/geo+json\n\n\n\n\n\n\n\n\n\n\nLink: Microsoft Planetary Computer STAC API\n\n\n\nrel: root\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/\n\n\ntype: application/json\n\n\ntitle: Microsoft Planetary Computer STAC API\n\n\n\n\n\n\n\n\n\n\nLink: Public Domain\n\n\n\nrel: license\n\n\nhref: https://www.fsa.usda.gov/help/policies-and-links/\n\n\ntitle: Public Domain\n\n\n\n\n\n\n\n\n\n\nLink: Human readable dataset overview and reference\n\n\n\nrel: describedby\n\n\nhref: https://planetarycomputer.microsoft.com/dataset/naip\n\n\ntype: text/html\n\n\ntitle: Human readable dataset overview and reference\n\n\n\n\n\n\n\n\n\n\nLink:\n\n\n\nrel: self\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/naip\n\n\ntype: application/json\n\n\n\n\n\n\n\n\n\n\nLink: Microsoft Planetary Computer STAC API\n\n\n\nrel: parent\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1\n\n\ntype: application/json\n\n\ntitle: Microsoft Planetary Computer STAC API\n\n\n\n\n\n\n\nAssets\n\n\n\n\n\nAsset: NAIP thumbnail\n\n\n\nhref: https://ai4edatasetspublicassets.blob.core.windows.net/assets/pc_thumbnails/naip.png\n\n\ntype: image/png\n\n\ntitle: NAIP thumbnail\n\n\nroles: ['thumbnail']\n\n\nowner: naip\n\n\n\n\n\n\n\n\n\n\nAsset: GeoParquet STAC items\n\n\n\nhref: abfs://items/naip.parquet\n\n\ntype: application/x-parquet\n\n\ntitle: GeoParquet STAC items\n\n\ndescription: Snapshot of the collection's STAC items exported to GeoParquet format.\n\n\nroles: ['stac-items']\n\n\nowner: naip\n\n\nmsft:partition_info: {'is_partitioned': True, 'partition_frequency': 'AS'}\n\n\ntable:storage_options: {'account_name': 'pcstacitems'}"
  },
  {
    "objectID": "blog/python_notebook_render/STAC-search.html#catalog-search",
    "href": "blog/python_notebook_render/STAC-search.html#catalog-search",
    "title": "ipynb rendered as html",
    "section": "Catalog Search",
    "text": "Catalog Search\nWe can narrow the search within the catalog by specifying a time range, an ara of interest, and the collection name. The simplest way to define the area of interest to look in the catalong are:\n\na GeoJSON-type dictionary with coordinates of the boudning box\nas a list [xmin, ymin, ymax, xmax] with the coordinate values defined the dour cornoers of the bounding box,\n\nYou could also se a point, or some more complex polygon.\nIn this lession, we will look for NAIP scenes over Santa Barbara from 2018 to 2020. We will use the GeoJSON method: to define the arwa of interest\n\n# temporal range of interest\ntime_range = \"2018-01-01/2023-01-01\"\n\n# NCEAS bounding box (as a GeoJSON)\nbbox = {\n    \"type\": \"Polygon\",\n    \"coordinates\":[\n        [\n            [-119.70608227128903, 34.426300194372274],\n            [-119.70608227128903, 34.42041139020533],\n            [-119.6967885126002, 34.42041139020533],\n            [-119.6967885126002, 34.426300194372274],\n            [-119.70608227128903, 34.426300194372274]\n        ]\n    ],\n}\n\n# catalog search\nsearch = catalog.search(\n    collections=['naip'],\n    intersects=bbox,\n    datetime=time_range)\nsearch\n\n&lt;pystac_client.item_search.ItemSearch at 0x78632f3bb750&gt;\n\n\nTo get the items foind in the seach(or check id there wwee any matches in the search) we use the item_collection() method\n\nitems = search.item_collection()\nlen(items)\n\n2\n\n\nThis output tells us there were two items in the catalog that matched our search!\n\nitems\n\n\n\n\n    \n    \n    \n        \n            \n                \n                    ItemCollection\n                \n            \n            \n\nItems\n\n\n\n\n\nItem: ca_m_3411935_sw_11_060_20200521\n\n\n\nid: ca_m_3411935_sw_11_060_20200521\n\n\nbbox: [-119.754272, 34.371741, -119.683292, 34.440724]\n\n\ngsd: 0.6\n\n\ndatetime: 2020-05-21T00:00:00Z\n\n\nnaip:year: 2020\n\n\nproj:bbox: [246930.0, 3806808.0, 253260.0, 3814296.0]\n\n\nproj:epsg: 26911\n\n\nnaip:state: ca\n\n\nproj:shape: [12480, 10550]\n\n\nproj:transform: [0.6, 0.0, 246930.0, 0.0, -0.6, 3814296.0, 0.0, 0.0, 1.0]\n\n\n\n\nSTAC Extensions\n\n\n\nhttps://stac-extensions.github.io/eo/v1.0.0/schema.json\n\n\nhttps://stac-extensions.github.io/projection/v1.0.0/schema.json\n\n\n\n\n\nAssets\n\n\n\n\n\nAsset: RGBIR COG tile\n\n\n\nhref: https://naipeuwest.blob.core.windows.net/naip/v002/ca/2020/ca_060cm_2020/34119/m_3411935_sw_11_060_20200521.tif?st=2023-11-26T21%3A20%3A50Z&se=2023-12-04T21%3A20%3A51Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-11-27T21%3A20%3A49Z&ske=2023-12-04T21%3A20%3A49Z&sks=b&skv=2021-06-08&sig=BxGXBYQacQKDsn9FO8actIpkt5SWsyRCUG4bTcQCIqo%3D\n\n\ntype: image/tiff; application=geotiff; profile=cloud-optimized\n\n\ntitle: RGBIR COG tile\n\n\nroles: ['data']\n\n\nowner: ca_m_3411935_sw_11_060_20200521\n\n\neo:bands: [{'name': 'Red', 'common_name': 'red'}, {'name': 'Green', 'common_name': 'green'}, {'name': 'Blue', 'common_name': 'blue'}, {'name': 'NIR', 'common_name': 'nir', 'description': 'near-infrared'}]\n\n\n\n\n\n\n\n\n\n\nAsset: Thumbnail\n\n\n\nhref: https://naipeuwest.blob.core.windows.net/naip/v002/ca/2020/ca_060cm_2020/34119/m_3411935_sw_11_060_20200521.200.jpg?st=2023-11-26T21%3A20%3A50Z&se=2023-12-04T21%3A20%3A51Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-11-27T21%3A20%3A49Z&ske=2023-12-04T21%3A20%3A49Z&sks=b&skv=2021-06-08&sig=BxGXBYQacQKDsn9FO8actIpkt5SWsyRCUG4bTcQCIqo%3D\n\n\ntype: image/jpeg\n\n\ntitle: Thumbnail\n\n\nroles: ['thumbnail']\n\n\nowner: ca_m_3411935_sw_11_060_20200521\n\n\n\n\n\n\n\n\n\n\nAsset: TileJSON with default rendering\n\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=naip&item=ca_m_3411935_sw_11_060_20200521&assets=image&asset_bidx=image%7C1%2C2%2C3&format=png\n\n\ntype: application/json\n\n\ntitle: TileJSON with default rendering\n\n\nroles: ['tiles']\n\n\nowner: ca_m_3411935_sw_11_060_20200521\n\n\n\n\n\n\n\n\n\n\nAsset: Rendered preview\n\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=naip&item=ca_m_3411935_sw_11_060_20200521&assets=image&asset_bidx=image%7C1%2C2%2C3&format=png\n\n\ntype: image/png\n\n\ntitle: Rendered preview\n\n\nroles: ['overview']\n\n\nowner: ca_m_3411935_sw_11_060_20200521\n\n\nrel: preview\n\n\n\n\n\n\n\nLinks\n\n\n\n\n\nLink:\n\n\n\nrel: collection\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/naip\n\n\ntype: application/json\n\n\n\n\n\n\n\n\n\n\nLink:\n\n\n\nrel: parent\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/naip\n\n\ntype: application/json\n\n\n\n\n\n\n\n\n\n\nLink: Microsoft Planetary Computer STAC API\n\n\n\nrel: root\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1\n\n\ntype: application/json\n\n\ntitle: Microsoft Planetary Computer STAC API\n\n\n\n\n\n\n\n\n\n\nLink:\n\n\n\nrel: self\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/naip/items/ca_m_3411935_sw_11_060_20200521\n\n\ntype: application/geo+json\n\n\n\n\n\n\n\n\n\n\nLink: Map of item\n\n\n\nrel: preview\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/map?collection=naip&item=ca_m_3411935_sw_11_060_20200521\n\n\ntype: text/html\n\n\ntitle: Map of item\n\n\n\n\n\n\n\n\n\n\n\n\n\nItem: ca_m_3411935_sw_11_060_20180724_20190209\n\n\n\nid: ca_m_3411935_sw_11_060_20180724_20190209\n\n\nbbox: [-119.753736, 34.372185, -119.683827, 34.44028]\n\n\ngsd: 0.6\n\n\ndatetime: 2018-07-24T00:00:00Z\n\n\nnaip:year: 2018\n\n\nproj:bbox: [246978.0, 3806856.0, 253212.0, 3814248.0]\n\n\nproj:epsg: 26911\n\n\nnaip:state: ca\n\n\nproj:shape: [12320, 10390]\n\n\nproj:transform: [0.6, 0.0, 246978.0, 0.0, -0.6, 3814248.0, 0.0, 0.0, 1.0]\n\n\n\n\nSTAC Extensions\n\n\n\nhttps://stac-extensions.github.io/eo/v1.0.0/schema.json\n\n\nhttps://stac-extensions.github.io/projection/v1.0.0/schema.json\n\n\n\n\n\nAssets\n\n\n\n\n\nAsset: RGBIR COG tile\n\n\n\nhref: https://naipeuwest.blob.core.windows.net/naip/v002/ca/2018/ca_060cm_2018/34119/m_3411935_sw_11_060_20180724_20190209.tif?st=2023-11-26T21%3A20%3A50Z&se=2023-12-04T21%3A20%3A51Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-11-27T21%3A20%3A49Z&ske=2023-12-04T21%3A20%3A49Z&sks=b&skv=2021-06-08&sig=BxGXBYQacQKDsn9FO8actIpkt5SWsyRCUG4bTcQCIqo%3D\n\n\ntype: image/tiff; application=geotiff; profile=cloud-optimized\n\n\ntitle: RGBIR COG tile\n\n\nroles: ['data']\n\n\nowner: ca_m_3411935_sw_11_060_20180724_20190209\n\n\neo:bands: [{'name': 'Red', 'common_name': 'red'}, {'name': 'Green', 'common_name': 'green'}, {'name': 'Blue', 'common_name': 'blue'}, {'name': 'NIR', 'common_name': 'nir', 'description': 'near-infrared'}]\n\n\n\n\n\n\n\n\n\n\nAsset: FGDC Metdata\n\n\n\nhref: https://naipeuwest.blob.core.windows.net/naip/v002/ca/2018/ca_fgdc_2018/34119/m_3411935_sw_11_060_20180724.txt?st=2023-11-26T21%3A20%3A50Z&se=2023-12-04T21%3A20%3A51Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-11-27T21%3A20%3A49Z&ske=2023-12-04T21%3A20%3A49Z&sks=b&skv=2021-06-08&sig=BxGXBYQacQKDsn9FO8actIpkt5SWsyRCUG4bTcQCIqo%3D\n\n\ntype: text/plain\n\n\ntitle: FGDC Metdata\n\n\nroles: ['metadata']\n\n\nowner: ca_m_3411935_sw_11_060_20180724_20190209\n\n\n\n\n\n\n\n\n\n\nAsset: Thumbnail\n\n\n\nhref: https://naipeuwest.blob.core.windows.net/naip/v002/ca/2018/ca_060cm_2018/34119/m_3411935_sw_11_060_20180724_20190209.200.jpg?st=2023-11-26T21%3A20%3A50Z&se=2023-12-04T21%3A20%3A51Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-11-27T21%3A20%3A49Z&ske=2023-12-04T21%3A20%3A49Z&sks=b&skv=2021-06-08&sig=BxGXBYQacQKDsn9FO8actIpkt5SWsyRCUG4bTcQCIqo%3D\n\n\ntype: image/jpeg\n\n\ntitle: Thumbnail\n\n\nroles: ['thumbnail']\n\n\nowner: ca_m_3411935_sw_11_060_20180724_20190209\n\n\n\n\n\n\n\n\n\n\nAsset: TileJSON with default rendering\n\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=naip&item=ca_m_3411935_sw_11_060_20180724_20190209&assets=image&asset_bidx=image%7C1%2C2%2C3&format=png\n\n\ntype: application/json\n\n\ntitle: TileJSON with default rendering\n\n\nroles: ['tiles']\n\n\nowner: ca_m_3411935_sw_11_060_20180724_20190209\n\n\n\n\n\n\n\n\n\n\nAsset: Rendered preview\n\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=naip&item=ca_m_3411935_sw_11_060_20180724_20190209&assets=image&asset_bidx=image%7C1%2C2%2C3&format=png\n\n\ntype: image/png\n\n\ntitle: Rendered preview\n\n\nroles: ['overview']\n\n\nowner: ca_m_3411935_sw_11_060_20180724_20190209\n\n\nrel: preview\n\n\n\n\n\n\n\nLinks\n\n\n\n\n\nLink:\n\n\n\nrel: collection\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/naip\n\n\ntype: application/json\n\n\n\n\n\n\n\n\n\n\nLink:\n\n\n\nrel: parent\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/naip\n\n\ntype: application/json\n\n\n\n\n\n\n\n\n\n\nLink: Microsoft Planetary Computer STAC API\n\n\n\nrel: root\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1\n\n\ntype: application/json\n\n\ntitle: Microsoft Planetary Computer STAC API\n\n\n\n\n\n\n\n\n\n\nLink:\n\n\n\nrel: self\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/naip/items/ca_m_3411935_sw_11_060_20180724_20190209\n\n\ntype: application/geo+json\n\n\n\n\n\n\n\n\n\n\nLink: Map of item\n\n\n\nrel: preview\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/map?collection=naip&item=ca_m_3411935_sw_11_060_20180724_20190209\n\n\ntype: text/html\n\n\ntitle: Map of item"
  },
  {
    "objectID": "blog/python_notebook_render/STAC-search.html#item",
    "href": "blog/python_notebook_render/STAC-search.html#item",
    "title": "ipynb rendered as html",
    "section": "Item",
    "text": "Item\nLets get the first item in the search\n\n#get first item in the catalong search\nitem = items[0]\ntype(item)\n\npystac.item.Item\n\n\nRemember the Stac item is the core object in the catalong.\nThe item does not contraon the data listen, but rather metadata about it and links to access the actual data(assets). some of the metatada\n\nprint('id', item.id)\nitem.properties\n\nid ca_m_3411935_sw_11_060_20200521\n\n\n{'gsd': 0.6,\n 'datetime': '2020-05-21T00:00:00Z',\n 'naip:year': '2020',\n 'proj:bbox': [246930.0, 3806808.0, 253260.0, 3814296.0],\n 'proj:epsg': 26911,\n 'naip:state': 'ca',\n 'proj:shape': [12480, 10550],\n 'proj:transform': [0.6, 0.0, 246930.0, 0.0, -0.6, 3814296.0, 0.0, 0.0, 1.0]}\n\n\nJust as the itm em properties, te item assets are given in a dictionary, with each value being a pystac.asse. Lets check the asets in item:\n\nitem.assets\n\n{'image': &lt;Asset href=https://naipeuwest.blob.core.windows.net/naip/v002/ca/2020/ca_060cm_2020/34119/m_3411935_sw_11_060_20200521.tif?st=2023-11-26T21%3A20%3A50Z&se=2023-12-04T21%3A20%3A51Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-11-27T21%3A20%3A49Z&ske=2023-12-04T21%3A20%3A49Z&sks=b&skv=2021-06-08&sig=BxGXBYQacQKDsn9FO8actIpkt5SWsyRCUG4bTcQCIqo%3D&gt;,\n 'thumbnail': &lt;Asset href=https://naipeuwest.blob.core.windows.net/naip/v002/ca/2020/ca_060cm_2020/34119/m_3411935_sw_11_060_20200521.200.jpg?st=2023-11-26T21%3A20%3A50Z&se=2023-12-04T21%3A20%3A51Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-11-27T21%3A20%3A49Z&ske=2023-12-04T21%3A20%3A49Z&sks=b&skv=2021-06-08&sig=BxGXBYQacQKDsn9FO8actIpkt5SWsyRCUG4bTcQCIqo%3D&gt;,\n 'tilejson': &lt;Asset href=https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=naip&item=ca_m_3411935_sw_11_060_20200521&assets=image&asset_bidx=image%7C1%2C2%2C3&format=png&gt;,\n 'rendered_preview': &lt;Asset href=https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=naip&item=ca_m_3411935_sw_11_060_20200521&assets=image&asset_bidx=image%7C1%2C2%2C3&format=png&gt;}\n\n\n\nfor key in item.assets.keys():\n    print(key, '--', item.assets[key].title)\n\nimage -- RGBIR COG tile\nthumbnail -- Thumbnail\ntilejson -- TileJSON with default rendering\nrendered_preview -- Rendered preview\n\n\nNotice each asset has an href, which is a link to the asset object(i.e the data). For example, we can use the URL for the rendered preview asset to plot it\n\nImage(url=item.assets['rendered_preview'].href, width=500)"
  },
  {
    "objectID": "blog/python_notebook_render/STAC-search.html#load-data",
    "href": "blog/python_notebook_render/STAC-search.html#load-data",
    "title": "ipynb rendered as html",
    "section": "Load data",
    "text": "Load data\nThe raster data in our current item is in the image asset. Agsin, we access this data via its URL. THIS TIME WE OPEN IT USING `rioxr.open_rasterio()\n\nsb = rioxr.open_rasterio(item.assets['image'].href)\nsb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (band: 4, y: 12480, x: 10550)&gt;\n[526656000 values with dtype=uint8]\nCoordinates:\n  * band         (band) int64 1 2 3 4\n  * x            (x) float64 2.469e+05 2.469e+05 ... 2.533e+05 2.533e+05\n  * y            (y) float64 3.814e+06 3.814e+06 ... 3.807e+06 3.807e+06\n    spatial_ref  int64 0\nAttributes:\n    AREA_OR_POINT:             Area\n    TIFFTAG_IMAGEDESCRIPTION:  OrthoVista\n    TIFFTAG_RESOLUTIONUNIT:    1 (unitless)\n    TIFFTAG_SOFTWARE:          Trimble Germany GmbH\n    TIFFTAG_XRESOLUTION:       1\n    TIFFTAG_YRESOLUTION:       1\n    _FillValue:                0\n    scale_factor:              1.0\n    add_offset:                0.0xarray.DataArrayband: 4y: 12480x: 10550...[526656000 values with dtype=uint8]Coordinates: (4)band(band)int641 2 3 4array([1, 2, 3, 4])x(x)float642.469e+05 2.469e+05 ... 2.533e+05array([246930.3, 246930.9, 246931.5, ..., 253258.5, 253259.1, 253259.7])y(y)float643.814e+06 3.814e+06 ... 3.807e+06array([3814295.7, 3814295.1, 3814294.5, ..., 3806809.5, 3806808.9, 3806808.3])spatial_ref()int640crs_wkt :PROJCS[\"NAD83 / UTM zone 11N\",GEOGCS[\"NAD83\",DATUM[\"North_American_Datum_1983\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"6269\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4269\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"26911\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314140356inverse_flattening :298.257222101reference_ellipsoid_name :GRS 1980longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :NAD83horizontal_datum_name :North American Datum 1983projected_crs_name :NAD83 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"NAD83 / UTM zone 11N\",GEOGCS[\"NAD83\",DATUM[\"North_American_Datum_1983\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"6269\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4269\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"26911\"]]GeoTransform :246930.0 0.6 0.0 3814296.0 0.0 -0.6array(0)Indexes: (3)bandPandasIndexPandasIndex(Index([1, 2, 3, 4], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([          246930.3,           246930.9,           246931.5,\n       246932.09999999998, 246932.69999999998,           246933.3,\n                 246933.9,           246934.5, 246935.09999999998,\n       246935.69999999998,\n       ...\n                 253254.3,           253254.9,           253255.5,\n       253256.09999999998, 253256.69999999998,           253257.3,\n                 253257.9,           253258.5, 253259.09999999998,\n       253259.69999999998],\n      dtype='float64', name='x', length=10550))yPandasIndexPandasIndex(Index([         3814295.7,          3814295.1,          3814294.5,\n       3814293.9000000004, 3814293.3000000003,          3814292.7,\n                3814292.1,          3814291.5, 3814290.9000000004,\n       3814290.3000000003,\n       ...\n                3806813.7,          3806813.1,          3806812.5,\n       3806811.9000000004, 3806811.3000000003,          3806810.7,\n                3806810.1,          3806809.5, 3806808.9000000004,\n       3806808.3000000003],\n      dtype='float64', name='y', length=12480))Attributes: (9)AREA_OR_POINT :AreaTIFFTAG_IMAGEDESCRIPTION :OrthoVistaTIFFTAG_RESOLUTIONUNIT :1 (unitless)TIFFTAG_SOFTWARE :Trimble Germany GmbHTIFFTAG_XRESOLUTION :1TIFFTAG_YRESOLUTION :1_FillValue :0scale_factor :1.0add_offset :0.0\n\n\n\n# plot raster with correct ratio\nsize = 6 # height in in of plot height\naspect = sb.rio.width / sb.rio.height \n# select R,G,B bands and plot\nsb.sel(band=[1,2,3]).plot.imshow(size=size, aspect=aspect)\n\n&lt;matplotlib.image.AxesImage at 0x7863349b4050&gt;"
  },
  {
    "objectID": "blog/python_notebook_render/STAC-search.html#excersise",
    "href": "blog/python_notebook_render/STAC-search.html#excersise",
    "title": "ipynb rendered as html",
    "section": "Excersise",
    "text": "Excersise\nThe ‘cop-dem-glo-90’ collection contains the Copernicus DEM at 90m resolution (the data we previously used for the Grand Canyon).\n\nReuse the bbox for Santa Barbara to look for items in this collection.\nGet the first item in the search and check its assets.\nCheck the item’s rendered preview asset by clicking on it’s URL.\nOpen the item’s data using rioxarray.\n\n\n# Temporal range of interest\ntime_range2 = \"2018-01-01/2023-01-01\"\n\n# NCEAS bounding box (as a GeoJSON)\nbbox2 = {\n    \"type\": \"Polygon\",\n    \"coordinates\":[\n        [\n            [-119.70608227128903, 34.426300194372274],\n            [-119.70608227128903, 34.42041139020533],\n            [-119.6967885126002, 34.42041139020533],\n            [-119.6967885126002, 34.426300194372274],\n            [-119.70608227128903, 34.426300194372274]\n        ]\n    ],\n}\n\n# catalog search\nsearch = catalog.search(\n    collections=['cop-dem-glo-90'],\n    intersects=bbox,\n    datetime=time_range)\nsearch\n\n&lt;pystac_client.item_search.ItemSearch at 0x7862ffed9d50&gt;\n\n\n\nitems = search.item_collection()\nlen(items)\n\n1\n\n\n\n#get first item in the catalong search\nitem = items[0]\ntype(item)\n\npystac.item.Item\n\n\n\nitem.assets\n\n{'data': &lt;Asset href=https://elevationeuwest.blob.core.windows.net/copernicus-dem/COP90_hh/Copernicus_DSM_COG_30_N34_00_W120_00_DEM.tif?st=2023-11-26T21%3A41%3A56Z&se=2023-12-04T21%3A41%3A57Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-11-27T21%3A41%3A55Z&ske=2023-12-04T21%3A41%3A55Z&sks=b&skv=2021-06-08&sig=MOuZclBbVn%2B1pdWbpqqI5dGG5BZcmGylwGwvAufYIjI%3D&gt;,\n 'tilejson': &lt;Asset href=https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=cop-dem-glo-90&item=Copernicus_DSM_COG_30_N34_00_W120_00_DEM&assets=data&colormap_name=terrain&rescale=-1000%2C4000&format=png&gt;,\n 'rendered_preview': &lt;Asset href=https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=cop-dem-glo-90&item=Copernicus_DSM_COG_30_N34_00_W120_00_DEM&assets=data&colormap_name=terrain&rescale=-1000%2C4000&format=png&gt;}\n\n\n\nfor key in item.assets.keys():\n    print(key, '--', item.assets[key].title)\n\ndata -- N34_00_W120_00\ntilejson -- TileJSON with default rendering\nrendered_preview -- Rendered preview\n\n\n\nImage(url=item.assets['rendered_preview'].href, width=500)\n\n\n\n\n\nexcersize = rioxr.open_rasterio(item.assets['data'].href)\nexcersize\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (band: 1, y: 1200, x: 1200)&gt;\n[1440000 values with dtype=float32]\nCoordinates:\n  * band         (band) int64 1\n  * x            (x) float64 -120.0 -120.0 -120.0 ... -119.0 -119.0 -119.0\n  * y            (y) float64 35.0 35.0 35.0 35.0 35.0 ... 34.0 34.0 34.0 34.0\n    spatial_ref  int64 0\nAttributes:\n    AREA_OR_POINT:  Point\n    scale_factor:   1.0\n    add_offset:     0.0xarray.DataArrayband: 1y: 1200x: 1200...[1440000 values with dtype=float32]Coordinates: (4)band(band)int641array([1])x(x)float64-120.0 -120.0 ... -119.0 -119.0array([-120.      , -119.999167, -119.998333, ..., -119.0025  , -119.001667,\n       -119.000833])y(y)float6435.0 35.0 35.0 ... 34.0 34.0 34.0array([35.      , 34.999167, 34.998333, ..., 34.0025  , 34.001667, 34.000833])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :-120.00041666666667 0.0008333333333333334 0.0 35.000416666666666 0.0 -0.0008333333333333334array(0)Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([             -120.0, -119.99916666666667, -119.99833333333333,\n                 -119.9975, -119.99666666666667, -119.99583333333334,\n                  -119.995, -119.99416666666667, -119.99333333333334,\n                 -119.9925,\n       ...\n       -119.00833333333334,           -119.0075, -119.00666666666666,\n       -119.00583333333333,            -119.005, -119.00416666666666,\n       -119.00333333333333,           -119.0025, -119.00166666666667,\n       -119.00083333333333],\n      dtype='float64', name='x', length=1200))yPandasIndexPandasIndex(Index([              35.0,  34.99916666666667, 34.998333333333335,\n                  34.9975,  34.99666666666667,  34.99583333333333,\n                   34.995, 34.994166666666665,  34.99333333333333,\n                  34.9925,\n       ...\n        34.00833333333333,            34.0075,  34.00666666666667,\n       34.005833333333335,             34.005,  34.00416666666667,\n        34.00333333333333,            34.0025, 34.001666666666665,\n        34.00083333333333],\n      dtype='float64', name='y', length=1200))Attributes: (3)AREA_OR_POINT :Pointscale_factor :1.0add_offset :0.0"
  },
  {
    "objectID": "blog/python_notebook_render/STAC-search.html#acess",
    "href": "blog/python_notebook_render/STAC-search.html#acess",
    "title": "ipynb rendered as html",
    "section": "Acess",
    "text": "Acess\nWe use the Client function from the pystac_client package to access the catelog\n\n#access catelog\ncatalog = Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier = planetary_computer.sign_inplace)\n\nThe modifier parameter is needed to access the ara in the MPC carelong"
  },
  {
    "objectID": "blog/python_notebook_render/thomas_fire_analysis(3).html",
    "href": "blog/python_notebook_render/thomas_fire_analysis(3).html",
    "title": "Thomas Fire Analysis in Santa Barbara, CA",
    "section": "",
    "text": "Link to GitHub Repository: https://github.com/kristinaglass/thomas_fire_analysis"
  },
  {
    "objectID": "blog/python_notebook_render/thomas_fire_analysis(3).html#purpose",
    "href": "blog/python_notebook_render/thomas_fire_analysis(3).html#purpose",
    "title": "Thomas Fire Analysis in Santa Barbara, CA",
    "section": "Purpose",
    "text": "Purpose\nThe purpose of this dataset is to explore the impacts of the Thomas Fire in Santa Barbara from December 4, 2017 – March 22, 2018. This dataset explore landcover imagry and air quality"
  },
  {
    "objectID": "blog/python_notebook_render/thomas_fire_analysis(3).html#highlights-of-analysis",
    "href": "blog/python_notebook_render/thomas_fire_analysis(3).html#highlights-of-analysis",
    "title": "Thomas Fire Analysis in Santa Barbara, CA",
    "section": "Highlights of Analysis",
    "text": "Highlights of Analysis\n\n1.3 - Data Analysis\n1.4 - Plot AQI Data\n2.3 - Data Analysis\n2.4 - Plot Landsat Data"
  },
  {
    "objectID": "blog/python_notebook_render/thomas_fire_analysis(3).html#dataset-description-and-references",
    "href": "blog/python_notebook_render/thomas_fire_analysis(3).html#dataset-description-and-references",
    "title": "Thomas Fire Analysis in Santa Barbara, CA",
    "section": "Dataset Description and References",
    "text": "Dataset Description and References\nThe datasets used include: - Air Quality Index (AQI) data from the US Environmental Protection Agency - A simplified Landsat raster collected by the Landsat 8 satellite - A shapefile of fire perimeters in California during 2017 from the CA State Geoportal - A subset of the US Census Bureau’s 2016 TIGER database state boundary - And various datasets included in a ‘data’ folder"
  },
  {
    "objectID": "blog/python_notebook_render/thomas_fire_analysis(3).html#exploring-air-quality-index-aqi",
    "href": "blog/python_notebook_render/thomas_fire_analysis(3).html#exploring-air-quality-index-aqi",
    "title": "Thomas Fire Analysis in Santa Barbara, CA",
    "section": "1. Exploring Air Quality Index (AQI)",
    "text": "1. Exploring Air Quality Index (AQI)\n\n1.1 Read in AQI Datasets\n\n#read in 2017 and 2018 daily aqi by county\naqi_17 = pd.read_csv(\"https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip\")\naqi_18 = pd.read_csv(\"https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip\")\n\n\n\n1.2 Data Exploration\n\n#view number of objects in aqi_17\nlen(aqi_17)\n\n#view type of aqi_18\ntype(aqi_18)\n\npandas.core.frame.DataFrame\n\n\n\n\n1.3 Data Analysis\nThis section allows us to simplify and modify the combined datasets (2017-2018) to plot only the necessary information. Setting the index as “date” is necessary to allow us to plot the AQI over time. We find the rolling average over 5 days to compare against normal AQI measures\n\n#combine both datasets\naqi = pd.concat([aqi_17, aqi_18])\n\n# re-assign the column names\naqi.columns = aqi.columns.str.lower()\n\n#  re-assign the column names again\naqi.columns = aqi.columns.str.replace(' ','_')\n\n\n#subset Santa Barbara County from data frame\naqi_sb = aqi[aqi['county_name'] == \"Santa Barbara\"]\n#check new dataframe\naqi_sb\n#remove state_name, county_name, state_code, and county_code\naqi_sb = aqi_sb.drop(columns=[\"state_name\", \"county_name\", \"state_code\", \"county_code\"])\n\n#updating date column to datetime from object\naqi_sb.date = pd.to_datetime(aqi_sb.date)\n#update index\naqi_sb = aqi_sb.set_index(\"date\")\n\n# calculate average over a rolling window\n# 5D indicates the window will be over 5 days\naqi_sb.aqi.rolling('5D').mean()\n# adding five day average column\naqi_sb['five_day_average'] = aqi_sb.aqi.rolling('5D').mean()\n\n\n\n1.4 Plot AQI Data\nThis plot helps us to visualize the impacts of the Thomas fire on AQI in Santa Barbara County, showing the spike in AQI durring the Thomas Fire\n\n#Plotting AQI and 5 Day Average\n#Leave x input blank to plot over the index (date index)\naqi_sb.plot( \n        y= ['aqi', 'five_day_average'], #allows for aqi and 5-day-average to be on same plot\n        title = 'AQI and 5-Day AQI Average in Santa Barbara',\n        xlabel='Year',\n        ylabel='Aqi',        \n        color = {'aqi':'#154a74',\n                 'five_day_average': '#e88270'\n                 }\n        )\n\nplt.show\nplt.savefig('images/aqiplot.png')"
  },
  {
    "objectID": "blog/python_notebook_render/thomas_fire_analysis(3).html#exploring-landsat-8-false-color-image",
    "href": "blog/python_notebook_render/thomas_fire_analysis(3).html#exploring-landsat-8-false-color-image",
    "title": "Thomas Fire Analysis in Santa Barbara, CA",
    "section": "2. Exploring Landsat 8 False Color Image",
    "text": "2. Exploring Landsat 8 False Color Image\n\n2.1 Read in Landsat and Fire Permimeter Datasets\n\n# set landsat data file path\nlandsat_fp = os.path.join(os.getcwd(), 'data', 'landsat8-2018-01-26-sb-simplified.nc')\n#import landsat data\nlandsat = rioxr.open_rasterio(landsat_fp)\n\n# import fire perimeters as ca_fire\nca_fire = gpd.read_file('data/California_Fire_Perimeters_2017/California_Fire_Perimeters_2017.shp')\n\n\n\n2.2 Data Exploration\n\n#show dataset type of landsat\ntype(landsat)\n#show landsat values\nlandsat.values\n#show landsat crs\nlandsat.rio.crs\n\n#find type of ca_fire dataset\ntype(ca_fire)\n#check values of ca_fire\nca_fire.values\n#show ca_fire crs\nca_fire.crs\n\n&lt;Projected CRS: EPSG:3857&gt;\nName: WGS 84 / Pseudo-Mercator\nAxis Info [cartesian]:\n- X[east]: Easting (metre)\n- Y[north]: Northing (metre)\nArea of Use:\n- name: World between 85.06°S and 85.06°N.\n- bounds: (-180.0, -85.06, 180.0, 85.06)\nCoordinate Operation:\n- name: Popular Visualisation Pseudo-Mercator\n- method: Popular Visualisation Pseudo Mercator\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\n\n\n2.3 Data Analysis\nThis portion of the analysis allows us to match the crs’s of the datasets so they can be plotted together, as well as simplifying our datasets to make them easier to plot\n\n# transform ca_fire crs\nca_fire.to_crs(crs = 32611, inplace = True)\n\n#subset ca_fire to Thomas Fire data, create new variable \"thomas\"\nthomas = ca_fire[ca_fire['FIRE_NAME']==\"THOMAS\"]\n\n#remove unecessary band \"band\" from landsat dataset\nlandsat = landsat.squeeze().drop('band')\n\n\n\n2.4 Plot Landsat Data\nThis plot allws us to see the boundaries of the Thomas Fire within Santa Barbara County to understand the fire’s area of impact\n\n#create plot\nfig, ax = plt.subplots()\n# --------------------------------------------\n# create landsat false color image with necessary color bands\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True)\n# --------------------------------------------\n#create thomas fire area boundaries\nthomas.plot(ax=ax, color = 'tomato', alpha = 0.5, edgecolor = \"red\")\n#create thomas fire legend patch\nthomas_patch = mpatches.Patch(color='tomato',\n                          label='Thomas Fire Boundaries')\n# --------------------------------------------\n# create plot legend\nax.legend(handles = [thomas_patch], frameon=False, loc='upper left', bbox_to_anchor = (1,1))\n#set plot tile\nax.set_title('Thomas Fire Boundaries within Santa Barbara')\n#remove axis\nax.set_axis_off()\n#show plot\nplt.show()\n\nfig.savefig('images/thomasfirebound.png')"
  },
  {
    "objectID": "blog/2012-12-15_santa_clara_river/index.html",
    "href": "blog/2012-12-15_santa_clara_river/index.html",
    "title": "NDVI Along Santa Clara River",
    "section": "",
    "text": "*Credit: This project is based on materials developed by Chris Kibler\n\n\nPhenology is the cyclical and seasonal lifecycle of natural phenomenon. For plants, importent phenological events include their growth of leaves, flowering, and death of leaves (or senescence). Some common phenological strategies of plants include the loss of leaves in winter and growth of leaves in spring (winter deciduous), the loss of leaves in summer (drought deciduous), and the maintenance of leaves year-round (evergreen). Due to climate change, plant phenology is shifting and it is important to understand what these shifts include and where these shifts are happening.\n\n\n\nFor this study, I’m interested in exploring plant phenology near the Santa Clara River which flows from Santa Clarita, CA and Ventura, CA. It is the last major coastal system within Southern California that has been relatively unchanged by development and supports over 17 species. The Santa Clara River is also supportive of one of the most valuable agricultural in the world1."
  },
  {
    "objectID": "blog/2012-12-15_santa_clara_river/index.html#what-is-phenology",
    "href": "blog/2012-12-15_santa_clara_river/index.html#what-is-phenology",
    "title": "NDVI Along Santa Clara River",
    "section": "",
    "text": "Phenology is the cyclical and seasonal lifecycle of natural phenomenon. For plants, importent phenological events include their growth of leaves, flowering, and death of leaves (or senescence). Some common phenological strategies of plants include the loss of leaves in winter and growth of leaves in spring (winter deciduous), the loss of leaves in summer (drought deciduous), and the maintenance of leaves year-round (evergreen). Due to climate change, plant phenology is shifting and it is important to understand what these shifts include and where these shifts are happening."
  },
  {
    "objectID": "blog/2012-12-15_santa_clara_river/index.html#area-of-interest",
    "href": "blog/2012-12-15_santa_clara_river/index.html#area-of-interest",
    "title": "NDVI Along Santa Clara River",
    "section": "",
    "text": "For this study, I’m interested in exploring plant phenology near the Santa Clara River which flows from Santa Clarita, CA and Ventura, CA. It is the last major coastal system within Southern California that has been relatively unchanged by development and supports over 17 species. The Santa Clara River is also supportive of one of the most valuable agricultural in the world1."
  },
  {
    "objectID": "blog/2012-12-15_santa_clara_river/index.html#creation-of-function",
    "href": "blog/2012-12-15_santa_clara_river/index.html#creation-of-function",
    "title": "NDVI Along Santa Clara River",
    "section": "Creation of Function",
    "text": "Creation of Function\nTo begin this analysis, a function to read in all NDVI layers was created. The code for this function is shown below\n\n\n\nFig. 1 Function that reads in all NDVI layers as a single raster stack. Inputs for the function are 1-8 based on the amount of raster images in “files” variable\n\n\nThe function as shown above (Fig.1) was created as a way to streamline reading in the raster data and combining the rasters into a single raster stack. The resulting output of “all_ndvi” was then used to plot the raster data and helped to further the analysis of NDVI around the Santa Clara River"
  },
  {
    "objectID": "blog/2012-12-15_santa_clara_river/index.html#ndvi-layers-across-vegetation-communities",
    "href": "blog/2012-12-15_santa_clara_river/index.html#ndvi-layers-across-vegetation-communities",
    "title": "NDVI Along Santa Clara River",
    "section": "NDVI Layers Across Vegetation Communities",
    "text": "NDVI Layers Across Vegetation Communities\nSince the NDVI for each scene was computed, I can now compare changes in NDVI values across the vegetation communities within the region. As a reminder, those communities are: riparion forests, grasslands, chaparral shrub lands. Now that we have computed NDVI for each of our scenes (days) we want to compare changes in NDVI values across different vegetation communities.\nThe vegetation communities were read in as “sites” and the dataset was cleaned in order to be merged with the NDVI dataset, and to make our main analysis simpler.\nThe average NDVI within vegetation communities was extracted using terra::extract(), then the resulting data frame was merged with “sites” by column using cbind(). The new data frame was then cleaned by first dropping the unnecessary geometry with st_drop_geometry(), then by dropping the “ID” and “name” columns with select(). Following that, pivot_longer() was used to increase the number of rows in the data frame and decrease the number of columns. rename() was used to create the “NDVI” column and columns “year”, “month”, and “day” were created using mutate() and str_sub() to extract and replace the date listed within the column into their own columns. This was done to create a new “date” column using unite() ,mutate(), and finally lubradate::as_date() to turn it into a datetime object.\n\nExploratory Plot\nThe following plot (Fig. 2) was created to visualize study sites across the Santa Clara River raster. The study sites are shown in purple polygons overlayed onto the raster.\n\n\n\nFig. 2 Plot of study sites over Santa Clarita River Raster. This is a basic exploratory plot in order to get a better understanding of our area of study and the locations of the study sites"
  },
  {
    "objectID": "blog/2012-12-15_santa_clara_river/index.html#results",
    "href": "blog/2012-12-15_santa_clara_river/index.html#results",
    "title": "NDVI Along Santa Clara River",
    "section": "Results",
    "text": "Results\n\n\n\nFig. 3 A line plot of seasonal cycles of vegetation productivity over June 2018 to July 2019. This plot shows the NDVI of vegetation communities by color\n\n\nNDVI values will range from -1.0 - 1.0, where negative values indicate clouds and water, positive values near zero indicate bare soil, values from 0.1-0.5 indicating sparse vegetation and 0.6-1.0 indicating dense green vegetation 2. With this knowledge, we can begin to interpret the results.\n\nChaparral\nNDVI primarily remained above 0.6, save for a dip falling to 0.55 at the lowest between July and October. Since these vegetation communities are dominated by evergreen species, this is an expected result since they stay green all year long. The small dip in NDVI could be attributed to high temperatures seen during the summer or a small drought period.\n\n\nRiparian Forests\nForest1 and Forest 2 maintain similar cycles of productivity, experiencing drops in NDVI under 0.5-0.4 from January to April, and rises in productivity during summer months. Since the communities within Riparian forests are winter deciduous, they will lose their leaves during the fall and winter and regrow them through the spring in summer, explaining the rise and fall cycles of its NDVI.\nFor Forest3 maintains similar productivity cycles as those listed above, but has much longer periods of maintaining sparse vegetation, save for a spike above 0.6 after April 2019.\n\n\nGrassland\nThis vegetation experiences the most extreme shifts in NDVI, with values under 0.3 from July 2018 to just after October 2018 where it experiences a sharp spike, followed by a sudden decline after April 2019. Since these grasses are deciduous, they lose their leaves in the winter and gain them back during the Spring."
  }
]